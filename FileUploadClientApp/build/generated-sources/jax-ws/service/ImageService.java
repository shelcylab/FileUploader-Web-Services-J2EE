
package service;

import java.util.List;
import java.util.concurrent.Future;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.AsyncHandler;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.Response;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.3.2
 * Generated source version: 2.2
 * 
 */
@WebService(name = "ImageService", targetNamespace = "http://service/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface ImageService {


    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns javax.xml.ws.Response<service.UploadResponse>
     */
    @WebMethod(operationName = "upload")
    @RequestWrapper(localName = "upload", targetNamespace = "http://service/", className = "service.Upload")
    @ResponseWrapper(localName = "uploadResponse", targetNamespace = "http://service/", className = "service.UploadResponse")
    public Response<UploadResponse> uploadAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        byte[] arg1);

    /**
     * 
     * @param arg1
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "upload")
    @RequestWrapper(localName = "upload", targetNamespace = "http://service/", className = "service.Upload")
    @ResponseWrapper(localName = "uploadResponse", targetNamespace = "http://service/", className = "service.UploadResponse")
    public Future<?> uploadAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        byte[] arg1,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UploadResponse> asyncHandler);

    /**
     * 
     * @param arg1
     * @param arg0
     */
    @WebMethod
    @RequestWrapper(localName = "upload", targetNamespace = "http://service/", className = "service.Upload")
    @ResponseWrapper(localName = "uploadResponse", targetNamespace = "http://service/", className = "service.UploadResponse")
    @Action(input = "http://service/ImageService/uploadRequest", output = "http://service/ImageService/uploadResponse")
    public void upload(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        byte[] arg1);

    /**
     * 
     * @return
     *     returns javax.xml.ws.Response<service.GetImageDetailsResponse>
     */
    @WebMethod(operationName = "GetImageDetails")
    @RequestWrapper(localName = "GetImageDetails", targetNamespace = "http://service/", className = "service.GetImageDetails")
    @ResponseWrapper(localName = "GetImageDetailsResponse", targetNamespace = "http://service/", className = "service.GetImageDetailsResponse")
    public Response<GetImageDetailsResponse> getImageDetailsAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GetImageDetails")
    @RequestWrapper(localName = "GetImageDetails", targetNamespace = "http://service/", className = "service.GetImageDetails")
    @ResponseWrapper(localName = "GetImageDetailsResponse", targetNamespace = "http://service/", className = "service.GetImageDetailsResponse")
    public Future<?> getImageDetailsAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetImageDetailsResponse> asyncHandler);

    /**
     * 
     * @return
     *     returns java.util.List<service.Imaged>
     */
    @WebMethod(operationName = "GetImageDetails")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "GetImageDetails", targetNamespace = "http://service/", className = "service.GetImageDetails")
    @ResponseWrapper(localName = "GetImageDetailsResponse", targetNamespace = "http://service/", className = "service.GetImageDetailsResponse")
    @Action(input = "http://service/ImageService/GetImageDetailsRequest", output = "http://service/ImageService/GetImageDetailsResponse")
    public List<Imaged> getImageDetails();

}
